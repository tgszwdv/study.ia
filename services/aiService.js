// /services/aiService.js
const axios = require("axios");
require("dotenv").config();

const AI_API_KEY = process.env.AI_API_KEY;
const AI_API_URL = process.env.AI_API_URL || "https://api.openai.com/v1";
const AI_MODEL = process.env.AI_MODEL || "gpt-4o-mini";

// Configura√ß√£o do cliente axios
const aiClient = axios.create({
  baseURL: AI_API_URL,
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${AI_API_KEY}`, // Importante para autentica√ß√£o
  },
});

// Fun√ß√£o para gerar explica√ß√£o sobre um t√≥pico
exports.generateExplanation = async (topic) => {
  try {
    const response = await aiClient.post("/chat/completions", {
      model: AI_MODEL,
      messages: [
        {
          role: "system",
          content:
            "Voc√™ √© um assistente educacional especializado em criar explica√ß√µes claras e concisas sobre diversos t√≥picos. Suas explica√ß√µes devem ser informativas e adequadas para estudantes.",
        },
        {
          role: "user",
          content: `Crie uma explica√ß√£o educativa sobre o t√≥pico: ${topic}. A explica√ß√£o deve ser abrangente, mas concisa, com aproximadamente 3-5 par√°grafos.`,
        },
      ],
      temperature: 0.7,
      max_tokens: 1000,
    });

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error(
      "Erro ao gerar explica√ß√£o:",
      error.response?.data || error.message
    );
    throw new Error("Falha ao gerar explica√ß√£o com a API de IA");
  }
};

// Fun√ß√£o para gerar quest√µes baseadas na explica√ß√£o
exports.generateQuestions = async (topic, explanation) => {
  try {
    const response = await aiClient.post("/chat/completions", {
      model: AI_MODEL,
      messages: [
        {
          role: "system",
          content: `
Voc√™ √© um assistente educacional especializado em criar quest√µes de m√∫ltipla escolha.

Gere 5 quest√µes sobre o t√≥pico fornecido com base na explica√ß√£o abaixo.

Responda exclusivamente no formato JSON (sem coment√°rios ou texto fora do JSON). Cada objeto do array deve conter:

- question: string
- options: array de 4 strings (as alternativas)
- correctAnswerIndex: n√∫mero (0-3)
- explanation: string explicando por que a alternativa est√° correta
          `.trim(),
        },
        {
          role: "user",
          content: `T√≥pico: ${topic}\n\nExplica√ß√£o: ${explanation}`,
        },
      ],
      temperature: 0.7,
      max_tokens: 2000,
    });

    let content = response.data.choices[0].message.content.trim();

    // üßº Remove blocos de c√≥digo markdown como ```json ... ```
    if (content.startsWith("```")) {
      content = content.replace(/```(?:json)?\n?/, "").replace(/```$/, "");
    }

    const questions = JSON.parse(content);
    return questions;
  } catch (error) {
    console.error(
      "Erro ao gerar quest√µes:",
      error.response?.data || error.message
    );
    throw new Error("Falha ao gerar quest√µes com a API de IA");
  }
};
